//詳細ドキュメント

//React
import React, { useState } from "react";
//コンポーネント
import Section from '../components/Section';
import LinkButton from '../components/LinkButton';
import ImgLine from '../components/ImgLine';
import TutorialTemplate from "../components/TutorialTemplate";
import NewLine from "../components/NewLine" ;
//CSS
import "../css/TutorialPage03.css";
//画像
import img01 from "../img/実行タイプ解説/01.PNG" ;
import img02 from "../img/実行タイプ解説/02.PNG" ;
import img03 from "../img/実行タイプ解説/03.PNG" ;
import img04 from "../img/実行タイプ解説/04.PNG" ;
import img05 from "../img/実行タイプ解説/05.PNG" ;
import img06 from "../img/実行タイプ解説/06.PNG" ;
import img07 from "../img/実行タイプ解説/07.PNG" ;
import img08 from "../img/実行タイプ解説/08.PNG" ;
import img09 from "../img/実行タイプ解説/09.PNG" ;
import img10 from "../img/実行タイプ解説/10.PNG" ;
import img11 from "../img/実行タイプ解説/11.PNG" ;
import img12 from "../img/実行タイプ解説/12.PNG" ;
import imgAt01 from "../img/配列テンプレート解説/01.PNG" ;
import imgAt02 from "../img/配列テンプレート解説/02.PNG" ;
import imgAt03 from "../img/配列テンプレート解説/03.PNG" ;
import imgAt04 from "../img/配列テンプレート解説/04.PNG" ;
import imgAt05 from "../img/配列テンプレート解説/05.PNG" ;
import imgAt06 from "../img/配列テンプレート解説/06.PNG" ;
import imgAt07 from "../img/配列テンプレート解説/07.PNG" ;
import imgAt08 from "../img/配列テンプレート解説/08.PNG" ;
import imgAt09 from "../img/配列テンプレート解説/09.PNG" ;
import imgAt10 from "../img/配列テンプレート解説/10.PNG" ;
import imgAt11 from "../img/配列テンプレート解説/11.PNG" ;


/*
<li>各記号のオプション</li>
<li>ちょっと便利な応用操作</li>
<li>実行タイプ</li>
<li>配列テンプレート</li>
<li>ファイル管理</li>
*/

const Table = (props)=>{
    const items = props.items ;

    const trs = items.map((ele,idx)=>{
        return (<tr key={idx}>  
            {ele.map((e,i)=>{return <td key={i}>{e}</td>})}  
        </tr>) ;
    }) ;
    return (
    <table>
        <tbody>
            {trs}
        </tbody>
    </table>
    ) ;
};



//-------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------


const pageList = [
    {
        "pageId": "1",
        "title": "このページは？",
        "jsx":
            <>
                <Section>
                    <h1 >このページは？</h1>
                    このページではFBEの各記号のオプションについての説明や、
                    応用的な操作について説明しています。
                    FBEの基本的な使い方を学びたい方は、FBE チュートリアルをご覧ください。
                    <LinkButton href="/fbe_tutorial/1" text="FBEチュートリアルへ" />
                    チュートリアルよりも詳しく知りたいとき・予想通り動かない時等に見てみてください。
                </Section>
                <Section>
                    <h1>このページで学べること</h1>
                    このページで学べることは以下の通りです。
                    何かこれでも解決しない不都合がありましたら、
                    問い合わせよりご連絡いただけると幸いです。
                    <ul>
                        <li>各記号のオプション</li>
                        <li>ちょっと便利な応用操作</li>
                        <li>実行タイプ</li>
                        <li>配列テンプレート</li>
                        <li>ファイル管理</li>
                    </ul>
                </Section>
            </>
    },
    {
        "pageId": "2",
        "title": "記号のオプション",
        "jsx":
            <>
            <Section>
                <h1 >記号のオプション</h1>
                例えば同じ計算記号でも中に書く内容は
                「0 → 合計」であったり「999　→ 最小」であったりと何パターンもあります。
                このように、同じ記号でも違いを持たせるときには
                FBEでは<b>記号のオプション</b>を利用します。<br/>
                設定できるオプションは記号ごとに異なります。
                それぞれの記号にはどのようなオプションがあり、
                そのオプションがどのような意味を持つのかを
                このページで解説します。
                <h1>オプションの設定方法</h1>
                オプションは、設定したい記号をダブルクリックするか・
                右クリックして出てきたメニューからオプションを選択することで
                表示されるウィンドウから設定できます。
            </Section>
            <Section>
                <h1>端子記号のオプション</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["タイプ",
                            "はじめまたはおわりを指定します。",
                            "はじめ または おわり"],
                        ["テキスト",
                            <>タイプがはじめの場合に表示されるテキストを指定します。（詳細を参照）</>,
                            "任意の文字列 または 任意の文字列(引数1,引数2, ...)"],
                        ["戻り値",
                            "タイプがおわりの場合に、プログラムに返す値を指揮で指定します。",
                            "式"],
                    ]} />
                <h2>詳細</h2>
                <h3>テキスト</h3>
                テキストには二つの使用方法があります。
                一つ目はフローに名前を付けることです。
                名前を付けることでどのような処理かが分かりやすくなります。<br/>
                二つ目は関数として定義することです。
                フローを関数として定義するためにはテキストオプションに
                「関数名(引数)」という形式で指定します。引数は「,」区切りで複数指定できます。<br/>
                例） <br/>絶対値(数値)<br/>余り(割られる数,割る数)<br/>
            </Section>
            <Section>
                <h1>計算記号</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["式",
                            "代入先変数に代入したいものを指定します。",
                            "式"],
                        ["代入先変数",
                            "式の計算結果を代入したい変数を指定します。",
                            "変数名"],
                    ]} />
                たとえば、"式"に1+2+3,"代入先変数"に答えを指定した場合、「1+2+3 → 答え」
                と表示されます。
            </Section>
            <Section>
                <h1>データ記号</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["タイプ",
                            "入出力の種類を指定します。（詳細を参照）",
                            "キーボード入力 または ファイル入力 出力 ダイアログで表示"],
                        ["対象",
                            "入力の場合は入力結果を度の変数に保存するか、出力の場合は何を出力するかを指定します",
                            "タイプオプション・実行タイプなどによって異なる(各実行タイプのレファレンスを参照)"],
                    ]} />
                たとえば、"式"に1+2+3,"代入先変数"に答えを指定した場合、「1+2+3 → 答え」
                と表示されます。
                <h2>詳細</h2>
                タイプには4つの項目があります。
                <dl>
                    <dt>キーボード入力</dt>
                        <dd>入力ダイアログが表示され、そこに入力するタイプです。</dd>
                    <dt>ファイル入力</dt>
                        <dd>ファイルから1行ずつ読み取り、それを入力とします。
                            <b>これを使用する場合、対象オプションにはファイル名を指定してください。</b></dd>
                    <dt>出力</dt>
                        <dd>対象オプションに指定されたものを出力します。実行タイプによってどのように表示されるのかが異なります。</dd>
                    <dt>ダイアログで表示</dt>
                        <dd>実行タイプに関係なく、対象オプションに指定されたものをダイアログで表示します。</dd>
                </dl>
            </Section>
            <Section>
                <h1>ループ記号(～の間)</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["条件",
                            "繰り返し処理の条件式を指定します。trueを指定すると、無限ループになります。",
                            "条件式"],
                        ["タイプ",
                            <>前判定・後判定が指定されたときはどのタイミングで条件を判定するのかを指定します。
                                データがある間が指定されたときは<b>条件オプションにファイル名を指定して</b>そのファイルにデータがある間繰り返します。</>,
                            "前判定 または 後判定 または データがある間"],
                    ]} />
            </Section>
            <Section>
                <h1>分岐記号(Yes No)</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["条件",
                            "分岐処理の条件式を指定します。",
                            "条件式"],
                    ]} />
            </Section>
            <Section>
                <h1>ループ記号(～を〇から〇ずつ増やして～の間)</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["ループ変数",
                            "ループに使用する変数を指定します。一般的にはi,j,k,...等を使うことが多いです。",
                            "変数名"],
                        ["初期値",
                            "ループ変数の初期値を指定します。",
                            "式"],
                        ["条件",
                        "繰り返し処理の条件式を指定します。",
                            "条件式"],
                        ["増分",
                            "ループ変数の1ループごとの増分値（ループ変数をいくつ増やすか）を指定します。1を指定することが多いです。",
                            "式"],
                    ]} />
                    以上のオプションを適切に設定すると、「ループ変数を初期値から増分ずつ増やして条件の間」というループ記号になるはずです。
            </Section>
            <Section>
                <h1>分岐記号(多分岐)</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["条件",
                            "分岐に使用する変数を指定します。（詳細を参照）",
                            "変数名"],
                    ]} />
                <h2>詳細</h2>
                <h3>条件</h3>
                条件オプションにどの変数の値によって分岐させたいかを指定します。
                <h3>分岐先の増やし方・減らし方</h3>
                デフォルトでは、1,2,その他の3つの分岐先があります。
                分岐先を増やすには、分岐記号を右クリックして、フローを追加を選択します。
                その時にその他を追加を指定することで、その他を追加することもできます。<br/>
                分岐先を消すには消したい分岐先のタグ(デフォルトでは1,2,その他となっているところ)
                上で右クリックして、フローを削除するを選択することで削除することが出来ます。
                <h3>分岐先のタグの変更方法</h3>
                デフォルトで1,2,その他となっているところをタグと言います。
                タグを変更することで、例えば変数が0の時は～、5の時は～、その他の時は～
                と処理を分岐することが出来ます。
                タグを変更するにはタグを右クリックしてタグを変更するを選択して、出てきたウィンドウに
                指定したいタグを設定することで指定できます。
                タグには数値、true,false,文字列("で囲う),その他のいずれかを指定できます。
            </Section>
            <Section>
                <h1>定義済み処理記号</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["処理名",
                            "実行したい処理名を指定します。（詳細を参照）",
                            "任意の文字列 または 処理名(引数)"],
                    ]} />
                    <h2>詳細</h2>
                    <h3>処理名</h3>
                    処理名には実行したいフローを指定します。
                    フローは編集タブのフローを追加から追加できます。
                    そのフローのテキストオプションに指定した文字列を指定できます。
                    また、そのフローが関数として定義されている場合、処理名(引数)
                    という形式で処理を実行できます。
                    <h3>デフォルトで使用できる処理</h3>
                    定義済み処理記号で処理を実行するには、
                    あらかじめフローを作成しておく必要がありますが、
                    フローを作成する必要のない（=最初から使える）関数があります。
                    最新バージョンでは以下の関数が使用できます。
                    <ul>
                        <li>sleep(ミリ秒)・・・引数で指定した分だけ処理を停止します。</li>
                    </ul>
            </Section>
            <Section>
                <h1>準備記号</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["タイプ",
                            "準備するものの種類を選びます。",
                            "1次元配列,2次元配列,3次元配列"],
                        ["要素数",
                            "配列の要素数を1次元配列なら「要素数」,2次元配列なら「縦*横」,3次元配列なら「縦*横*奥幅」という形で指定します。",
                            "タイプによって異なる"],
                        ["対象",
                            "準備する配列の名前を指定します。",
                            "任意の文字列"],
                        ["初期値",
                            "配列内の各要素の初期値を指定します。",
                            "式"],
                        ["配列テンプレート",
                            <>配列テンプレートを使用する際にテンプレート名を指定します。詳しくは配列テンプレートのページを参照してください。</>,
                            "配列テンプレート名"],
                    ]} />
                <h2>詳細</h2>
                準備記号で配列を準備する例は以下の2通りです。<br/>
                例）
                <ul>
                    <li>要素数10の1次元配列ARRを初期値0で準備する</li>
                    タイプ:1次元配列, 要素数:10, 対象:ARR, 初期値:0 
                    <li>配列テンプレートGameMapをもとに2次元配列Mapを準備する</li>
                    タイプ:1次元配列, 対象:Map, 配列テンプレート:GameMap 
                </ul>
                上の例において、記載のないオプションには何も入力しないでください。
                <NewLine />
                配列テンプレートについては<a href="/fbe_ref/4">このページ</a>を参照してください。
            </Section>
            </>
    },
    {
        "pageId": "3",
        "title": "ちょっと便利な応用操作",
        "jsx":
            <Section>
                <h1 >ちょっと便利な応用操作</h1>
                <h2>{"編集タブ > ループ番号を更新"}</h2>
                フローチャートを組み立てていると繰り返し記号の"ループ〇"の〇の部分がずれることがあります。
                そのずれをなくし、1から順に振りなおします。

            </Section>
    },
    {
        "pageId": "4",
        "title": "実行タイプ",
        "jsx":
            <>
                <Section>
                    <h1 >実行タイプ</h1>
                    FBEでフローチャートを実行するときの形式を
                    <b>"実行タイプ"</b>と言います。
                    実行タイプが違うとデータ記号で出力を選んだ場合の
                    データの表示方法が違います。
                    例えば、実行タイプ"デフォルト"でデータ記号で「"FBE"を出力」
                    を実行すると、ダイアログが表示されますが、実行タイプ"実行コンソール"
                    を選択すると、黒い画面（コンソール）に1行ずつ表示されます。
                    同じフローチャートでも実行タイプが違うと、
                    ユーザ体験が大きく異なります。次の章からどのような実行タイプがあるかを見てみましょう。
                </Section>
                <Section>
                    <h1>デフォルト</h1>
                    実行タイプ"デフォルト"では、
                    以下のような挙動をします。
                    <NewLine />
                    データ記号
                    <ul>
                        <li>キーボード入力</li>
                        入力用ダイアログが表示されます。ユーザはそこにデータを入力できます。
                        <li>出力</li>
                        データ記号の対象オプションに指定された式を
                        ダイアログで表示します。
                    </ul>
                    <ImgLine cap="データ入力" src={img01} />
                    <ImgLine cap="データ出力" src={img02} />

                    <h2 id="default-data-option">データ記号のオプション</h2>
                    入力時
                    <Table 
                    items={[
                        [<center>オプション名</center>,"設定する値"],
                        ["タイプ",
                            "キーボード入力"],
                        ["対象",
                            "入力したい変数名"],
                    ]} />
                    <ImgLine cap="データ出力" src={img02} />
                    出力時
                    <Table 
                    items={[
                        [<center>オプション名</center>,"設定する値"],
                        ["タイプ",
                            "出力"],
                        ["対象",
                            "出力したい（表示したい）式"],
                    ]} />

                    <h2 id="default-option">オプション</h2>
                    <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["実行タイプ",
                            <>実行時に実行制御ウィンドウの実行ボタンを押したときの挙動が変わります。
                                "1つずつ実行"を選択すると、実行ボタンを押すと1つの記号（処理）が実行されます。
                                "すべて実行する"を選択すると、実行ボタンを押すとすべての記号（処理）を実行します。
                                </>,
                            "1つずつ実行 または すべて実行する"],
                    ]} />
                </Section>
                <Section>
                    <h1>実行コンソール</h1>
                    実行コンソールを選択すると、
                    実行開始時に以下のような<b>コンソールウィンドウ</b>（以下 コンソール）が表示されます。
                    <ImgLine cap="" src={img03} />
                    データの入力では以下のように入力ウィンドウから行います。
                    <ImgLine cap="" src={img04} />
                    入力が終わると、入力された値が、<b>青色で</b>コンソールに記録されます。
                    <ImgLine cap="" src={img05} />
                    データの出力では以下のように出力値が<b>白色で</b>表示されます。
                    <ImgLine cap="" src={img06} />
                    最終的に実行が完了すると次のように緑色のメッセージが表示されます。
                    <ImgLine cap="" src={img07} />

                    <h2>データ記号のオプション</h2>
                    入力時 <br/>
                    <a href="#default-data-option">※ デフォルトと同じです</a> <br/>
                    出力時 <br/>
                    <a href="#default-data-option">※ デフォルトと同じです</a>

                    <h2>オプション</h2>
                    <a href="#default-option">※ デフォルトと同じです</a>

                </Section>
                <Section>
                    <h1>表形式</h1>
                    表形式を選択すると、データが表形式で表示されます。
                    データの出力方法が他とは異なるので、注意してください。
                    <NewLine />
                    まず実行開始時に以下のようなウィンドウを表示します。
                    <ImgLine cap="" src={img08} />
                    入力時はデフォルトと同じように入力ウィンドウが表示されます。
                    <ImgLine cap="" src={img09} />
                    出力時はデータが表に追加される形で表示されます。
                    <ImgLine cap="" src={img10} />

                    <h2>データ記号のオプション</h2>
                    入力時 <br/>
                    <a href="#default-data-option">※ デフォルトと同じです</a> <br/>
                    出力時
                    <Table 
                    items={[
                        [<center>オプション名</center>,"設定する値"],
                        ["タイプ",
                            "出力"],
                        ["対象",
                            "出力したい（表示したい）式を「,」区切りで指定"],
                    ]} />
                    例えば次のように"A001"と"TBSten"という文字を表に追加したい場合は、
                    データ記号の対象オプションに「"A001","TBSten"」と指定します。
                    <ImgLine cap="" src={img11} />
                    この場合、データ記号の対象オプションに「"IDなし男"」と指定した時のように、
                    表の列数とデータの数が合わない場合は罫線（黒い実線）が付きません。（合計などを出力する時に便利です。）
                    <ImgLine cap="" src={img12} />

                    <h2>オプション</h2>
                    出力する表は実行タイプのオプションで設定できます。
                    <Table items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["実行タイプ",
                            <>実行時に実行制御ウィンドウの実行ボタンを押したときの挙動が変わります。
                                "1つずつ実行"を選択すると、実行ボタンを押すと1つの記号（処理）が実行されます。
                                "すべて実行する"を選択すると、実行ボタンを押すとすべての記号（処理）を実行します。
                                </>,
                            "1つずつ実行 または すべて実行する"],
                        ["表示する列",
                            <>表示する列のタイトル（ID,名前 など）を「,」区切りで指定します。</>,
                            "表示する列のタイトルを「,」区切りで指定"],
                        ["罫線で囲む",
                            <>表の枠を罫線で囲むかを指定</>,
                            "チェックするかチェックを外すか"],
                        ["文字の位置",
                            <>表の枠内での文字の位置を指定します。</>,
                            "左揃え または 中央ぞろえ または 右揃え"],
                    ]} />
                    例えば、次のような表を指定したい場合、
                    <ImgLine cap="" src={img08} />
                    次のように設定します。※ （任意） とあるところは何を選択してもかまいません
                    <Table items={[
                        [<center>オプション名</center>,<center>設定する値</center>],
                        ["実行タイプ",
                            "（任意）"],
                        ["表示する列",
                            "ID,ユーザ名"],
                        ["罫線で囲む",
                            "（任意）"],
                        ["文字の位置",
                            "（任意）"],
                    ]} />
                </Section>
                <Section>
                    <h1>2Dゲーム1</h1>
                    <b>※
                    この実行タイプはプレビュー版で、
                    現在はまだ非推奨ですが選択はできます。
                    </b>
                    もしあなたが開発者であったり、
                    プレビュー版についてコメントをくださるのであれば、
                    こちらの機能を試用してください。また詳細について知りたい場合はTBStenに直接連絡ください。
                </Section>
            </>
    },
    {
        "pageId": "5",
        "title": "配列テンプレート",
        "jsx":
        <>
            <Section>
                <h1 >配列テンプレート</h1>
                準備記号で配列を準備するとき、配列テンプレートを使えば
                各要素に様々な初期値を設定できます。
                例えば、得点を管理する1次元配列Tを用意するとき、
                初期値を｛80, 50, 60, 90, 70｝とする
                テストデータを用意したい事があります。
                これを作るには、まず配列Tを初期値0で初期化してから、
                80 → T[0],50 → T[1],...というように処理を逐一書かなければなりません。
                そこで初期値を｛80, 50, 60, 90, 70｝配列テンプレートを
                あらかじめ作っておき、準備記号ではその配列テンプレートを
                読み込むだけで配列の初期化ができるようになります。
                <NewLine />
                つまり配列テンプレートを使うことで得られるメリットは、
                80 → T[0],50 → T[1],...というように処理を逐一書かなくても良い点にあります。
                <NewLine />
                次の章から早速使い方を見てみましょう。
            </Section>
            <Section>
                <h1>配列テンプレートを扱う上でおさえておくべきこと</h1>
                始めに配列テンプレートを使って配列を初期化する手順を列挙しておきます。
                <ul>
                    <li>配列テンプレートを作成する</li>
                    <li>作成した配列テンプレートを準備記号で読み込む</li>
                </ul>
                <h1>配列テンプレートの作り方</h1>
                まず、実行メニューから配列テンプレートの作成を選択します。
                <ImgLine cap="実行 > 配列テンプレートの作成 を選択" src={imgAt01}/>
                すると配列テンプレートの一覧画面が表示されます。
                （デフォルトだと何も作っていないので一覧には何もない）
                新しく配列テンプレートを作るために"新規作成"ボタンを押します。
                <ImgLine cap="新規作成ウィンドウ" src={imgAt02}/>
                するとこのようなウィンドウが出てくるので、
                <ul>
                    <li>配列テンプレートのタイプ を 1次元配列 に</li>
                    <li>サイズを 5 に</li>
                </ul>
                設定して"設定に進む"ボタンをクリックしてください。
                <ImgLine cap="編集画面" src={imgAt03}/>
                続いて配列テンプレートの初期値を設定します。
                先ほど"1次元配列のサイズ5"と設定したので、1次元配列でサイズが5の配列が表示されています。
                この配列の各要素は<b>ダブルクリックすることで内容を自由に編集できます</b>。
                始めに配列の0番目に80を設定してみましょう。
                配列の0番目をダブルクリックします。
                <ImgLine cap="" src={imgAt04}/>
                出てきたウィンドウのテキストフィールドに80と入力します。
                <ImgLine cap="" src={imgAt05}/>
                これだけで編集ができました。他の要素もこのように編集しましょう。
                また配列テンプレートの名前を"点数一覧"と設定するためにテンプレート名のテキストフィールドに
                点数一覧と入力しましょう。
                <ImgLine cap="" src={imgAt06}/>
                上のように作成出来たら"適用"ボタンをクリックして
                ウィンドウを閉じましょう。
                <ImgLine cap="" src={imgAt07}/>
                一覧に点数一覧テンプレートを追加することが出来ました！
                次回以降これを編集するときは点数一覧をクリックして選択し、
                "編集"ボタンを押すことで編集が来ます。
                作成は以上で完了なので"閉じるボタン"からウィンドウを閉じましょう。

                <h1>配列テンプレートの読み込み方</h1>
                次は準備記号で作成した点数一覧テンプレートを読み込みましょう。
                まだ準備記号を作成していない場合はフローチャートの＋ボタンをクリックして
                配列を準備を選択して準備記号を追加してください。
                {/* <ImgLine cap="" src={imgAt08}/> */}
                つぎに準備記号のオプションを設定します。基本はデフォルトのままで、変える必要がある場所だけ変えてみましょう。
                変えるべきオプションは以下の通りです。
                <ul>
                    <li>対象 を T に（配列名を指定）</li>
                    <li>配列テンプレート を 点数一覧 に（配列テンプレート名を指定）</li>
                </ul>
                最終的には次のようになっているはずです。
                <ImgLine cap="" src={imgAt10}/>
                上のようになっていることが確認できたら、
                "保存して戻る"ボタンをおしてオプションウィンドウを閉じましょう。
                <NewLine />
                これで準備完了です。あとはフローチャートを実行してみると、準備記号で
                配列テンプレート通りに配列が準備できていることが確認できます。
                <ImgLine cap="" src={imgAt11}/>

            </Section>

            <Section>
                <h1>2次元配列のテンプレートを作る際に気を付けること</h1>
                2次元配列のテンプレートも1次元配列と同様に作成ができますが、
                少し注意すべきところがあります。
                それは、新規作成時のサイズの指定方法です。
                2次元配列のサイズは縦と横どちらも指定する必要があるため、
                「縦,横」というように指定します。
                例えば縦が10，横が5の2次元配列を作成したい場合、
                サイズに「10,5」と指定します。
            </Section>
        </>
    },
    {
        "pageId": "6",
        "title": "ファイル管理",
        "jsx":
            <Section>
                <h1 >ファイル管理</h1>
            </Section>
    },
    
];
export const pages = pageList;

const TutorialPage03 = (props) => {
    return (
        <TutorialTemplate className="tp03" match={props.match} title={<>FBE<br />レファレンス</>} pageList={pageList} url="/fbe_ref/" />
    );
};



export default TutorialPage03;

