//詳細ドキュメント

//React
import React, { useState } from "react";
//コンポーネント
import Section from '../components/Section';
import LinkButton from '../components/LinkButton';
import ImgLine from '../components/ImgLine';
import TutorialTemplate from "../components/TutorialTemplate";
//CSS
import "../css/TutorialPage03.css";
//画像


/*
<li>各記号のオプション</li>
<li>ちょっと便利な応用操作</li>
<li>実行タイプ</li>
<li>配列テンプレート</li>
<li>ファイル管理</li>
*/

const Table = (props)=>{
    const items = props.items ;

    const trs = items.map((ele,idx)=>{
        return (<tr key={idx}>  
            {ele.map((e,i)=>{return <td key={i}>{e}</td>})}  
        </tr>) ;
    }) ;
    return (
    <table>
        <tbody>
            {trs}
        </tbody>
    </table>
    ) ;
};



//-------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------


const pageList = [
    {
        "pageId": "1",
        "title": "このページは？",
        "jsx":
            <>
                <Section>
                    <h1 >このページは？</h1>
                    このページではFBEの各記号のオプションについての説明や、
                    応用的な操作について説明しています。
                    FBEの基本的な使い方を学びたい方は、FBE チュートリアルをご覧ください。
                    <LinkButton href="/fbe_tutorial/1" text="FBEチュートリアルへ" />
                    チュートリアルよりも詳しく知りたいとき・予想通り動かない時等に見てみてください。
                </Section>
                <Section>
                    <h1>このページで学べること</h1>
                    このページで学べることは以下の通りです。
                    何かこれでも解決しない不都合がありましたら、
                    問い合わせよりご連絡いただけると幸いです。
                    <ul>
                        <li>各記号のオプション</li>
                        <li>ちょっと便利な応用操作</li>
                        <li>実行タイプ</li>
                        <li>配列テンプレート</li>
                        <li>ファイル管理</li>
                    </ul>
                </Section>
            </>
    },
    {
        "pageId": "2",
        "title": "記号のオプション",
        "jsx":
            <>
            <Section>
                <h1 >記号のオプション</h1>
                例えば同じ計算記号でも中に書く内容は
                「0 → 合計」であったり「999　→ 最小」であったりと何パターンもあります。
                このように、同じ記号でも違いを持たせるときには
                FBEでは<b>記号のオプション</b>を利用します。<br/>
                設定できるオプションは記号ごとに異なります。
                それぞれの記号にはどのようなオプションがあり、
                そのオプションがどのような意味を持つのかを
                このページで解説します。
                <h1>オプションの設定方法</h1>
                オプションは、設定したい記号をダブルクリックするか・
                右クリックして出てきたメニューからオプションを選択することで
                表示されるウィンドウから設定できます。
            </Section>
            <Section>
                <h1>端子記号のオプション</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["タイプ",
                            "はじめまたはおわりを指定します。",
                            "はじめ または おわり"],
                        ["テキスト",
                            <>タイプがはじめの場合に表示されるテキストを指定します。（詳細を参照）</>,
                            "任意の文字列 または 任意の文字列(引数1,引数2, ...)"],
                        ["戻り値",
                            "タイプがおわりの場合に、プログラムに返す値を指揮で指定します。",
                            "式"],
                    ]} />
                <h2>詳細</h2>
                <h3>テキスト</h3>
                テキストには二つの使用方法があります。
                一つ目はフローに名前を付けることです。
                名前を付けることでどのような処理かが分かりやすくなります。<br/>
                二つ目は関数として定義することです。
                フローを関数として定義するためにはテキストオプションに
                「関数名(引数)」という形式で指定します。引数は「,」区切りで複数指定できます。<br/>
                例） <br/>絶対値(数値)<br/>余り(割られる数,割る数)<br/>
            </Section>
            <Section>
                <h1>計算記号</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["式",
                            "代入先変数に代入したいものを指定します。",
                            "式"],
                        ["代入先変数",
                            "式の計算結果を代入したい変数を指定します。",
                            "変数名"],
                    ]} />
                たとえば、"式"に1+2+3,"代入先変数"に答えを指定した場合、「1+2+3 → 答え」
                と表示されます。
            </Section>
            <Section>
                <h1>データ記号</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["タイプ",
                            "入出力の種類を指定します。（詳細を参照）",
                            "キーボード入力 または ファイル入力 出力 ダイアログで表示"],
                        ["対象",
                            "入力の場合は入力結果を度の変数に保存するか、出力の場合は何を出力するかを指定します",
                            "タイプオプション・実行タイプなどによって異なる(各実行タイプのレファレンスを参照)"],
                    ]} />
                たとえば、"式"に1+2+3,"代入先変数"に答えを指定した場合、「1+2+3 → 答え」
                と表示されます。
                <h2>詳細</h2>
                タイプには4つの項目があります。
                <dl>
                    <dt>キーボード入力</dt>
                        <dd>入力ダイアログが表示され、そこに入力するタイプです。</dd>
                    <dt>ファイル入力</dt>
                        <dd>ファイルから1行ずつ読み取り、それを入力とします。
                            <b>これを使用する場合、対象オプションにはファイル名を指定してください。</b></dd>
                    <dt>出力</dt>
                        <dd>対象オプションに指定されたものを出力します。実行タイプによってどのように表示されるのかが異なります。</dd>
                    <dt>ダイアログで表示</dt>
                        <dd>実行タイプに関係なく、対象オプションに指定されたものをダイアログで表示します。</dd>
                </dl>
            </Section>
            <Section>
                <h1>ループ記号(～の間)</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["条件",
                            "繰り返し処理の条件式を指定します。trueを指定すると、無限ループになります。",
                            "条件式"],
                        ["タイプ",
                            <>前判定・後判定が指定されたときはどのタイミングで条件を判定するのかを指定します。
                                データがある間が指定されたときは<b>条件オプションにファイル名を指定して</b>そのファイルにデータがある間繰り返します。</>,
                            "前判定 または 後判定 または データがある間"],
                    ]} />
            </Section>
            <Section>
                <h1>分岐記号(Yes No)</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["条件",
                            "分岐処理の条件式を指定します。",
                            "条件式"],
                    ]} />
            </Section>
            <Section>
                <h1>ループ記号(～を〇から〇ずつ増やして～の間)</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["ループ変数",
                            "ループに使用する変数を指定します。一般的にはi,j,k,...等を使うことが多いです。",
                            "変数名"],
                        ["初期値",
                            "ループ変数の初期値を指定します。",
                            "式"],
                        ["条件",
                        "繰り返し処理の条件式を指定します。",
                            "条件式"],
                        ["増分",
                            "ループ変数の1ループごとの増分値（ループ変数をいくつ増やすか）を指定します。1を指定することが多いです。",
                            "式"],
                    ]} />
                    以上のオプションを適切に設定すると、「ループ変数を初期値から増分ずつ増やして条件の間」というループ記号になるはずです。
            </Section>
            <Section>
                <h1>分岐記号(多分岐)</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["条件",
                            "分岐に使用する変数を指定します。（詳細を参照）",
                            "変数名"],
                    ]} />
                <h2>詳細</h2>
                <h3>条件</h3>
                条件オプションにどの変数の値によって分岐させたいかを指定します。
                <h3>分岐先の増やし方・減らし方</h3>
                デフォルトでは、1,2,その他の3つの分岐先があります。
                分岐先を増やすには、分岐記号を右クリックして、フローを追加を選択します。
                その時にその他を追加を指定することで、その他を追加することもできます。<br/>
                分岐先を消すには消したい分岐先のタグ(デフォルトでは1,2,その他となっているところ)
                上で右クリックして、フローを削除するを選択することで削除することが出来ます。
                <h3>分岐先のタグの変更方法</h3>
                デフォルトで1,2,その他となっているところをタグと言います。
                タグを変更することで、例えば変数が0の時は～、5の時は～、その他の時は～
                と処理を分岐することが出来ます。
                タグを変更するにはタグを右クリックしてタグを変更するを選択して、出てきたウィンドウに
                指定したいタグを設定することで指定できます。
                タグには数値、true,false,文字列("で囲う),その他のいずれかを指定できます。
            </Section>
            <Section>
                <h1>定義済み処理記号</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["処理名",
                            "実行したい処理名を指定します。（詳細を参照）",
                            "任意の文字列 または 処理名(引数)"],
                    ]} />
                    <h2>詳細</h2>
                    <h3>処理名</h3>
                    処理名には実行したいフローを指定します。
                    フローは編集タブのフローを追加から追加できます。
                    そのフローのテキストオプションに指定した文字列を指定できます。
                    また、そのフローが関数として定義されている場合、処理名(引数)
                    という形式で処理を実行できます。
                    <h3>デフォルトで使用できる処理</h3>
                    定義済み処理記号で処理を実行するには、
                    あらかじめフローを作成しておく必要がありますが、
                    フローを作成する必要のない（=最初から使える）関数があります。
                    最新バージョンでは以下の関数が使用できます。
                    <ul>
                        <li>sleep(ミリ秒)・・・引数で指定した分だけ処理を停止します。</li>
                    </ul>
            </Section>
            <Section>
                <h1>準備記号</h1>
                <Table 
                    items={[
                        [<center>オプション名</center>,"",<center>設定できる値</center>],
                        ["タイプ",
                            "準備するものの種類を選びます。",
                            "1次元配列,2次元配列,3次元配列"],
                        ["要素数",
                            "配列の要素数を1次元配列なら「要素数」,2次元配列なら「縦*横」,3次元配列なら「縦*横*奥幅」という形で指定します。",
                            "タイプによって異なる"],
                        ["対象",
                            "",
                            ""],
                        ["初期値",
                            "",
                            ""],
                        ["配列テンプレート",
                            "",
                            ""],
                    ]} />
            </Section>
            </>
    },
    {
        "pageId": "3",
        "title": "ちょっと便利な応用操作",
        "jsx":
            <Section>
                <h1 >ちょっと便利な応用操作</h1>
            </Section>
    },
    {
        "pageId": "3",
        "title": "実行タイプ",
        "jsx":
            <Section>
                <h1 >実行タイプ</h1>
            </Section>
    },
    {
        "pageId": "4",
        "title": "配列テンプレート",
        "jsx":
            <Section>
                <h1 >配列テンプレート</h1>
            </Section>
    },
    {
        "pageId": "5",
        "title": "ファイル管理",
        "jsx":
            <Section>
                <h1 >ファイル管理</h1>
            </Section>
    },
    
];
export const pages = pageList;

const TutorialPage03 = (props) => {
    return (
        <TutorialTemplate className="tp03" match={props.match} title={<>FBE<br />レファレンス</>} pageList={pageList} url="/fbe_ref/" />
    );
};



export default TutorialPage03;

