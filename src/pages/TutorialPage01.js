//React
import React, { useState } from "react";
//コンポーネント
import Section from '../components/Section';
import LinkButton from '../components/LinkButton';
import ImgLine from '../components/ImgLine';
import NewLine from '../components/NewLine';
import TutorialTemplate from "../components/TutorialTemplate" ;
//CSS
import "../css/TutorialPage01.css";
//画像
import { flowchart_tutorial_imgs as imgs, sym_imgs as symImgs } from "../utils/variables";
import imgVar01 from "../img/変数01.png";
import imgFI from "../img/ファイル読み込み.png";
import imgFI2 from "../img/ファイル読み込み2.png";
import imgArr02 from "../img/配列02.png";
import imgArr03 from "../img/配列03.png";



//マテリアルアイコン
// import { makeStyles } from '@material-ui/core/styles';
// import Accordion from '@material-ui/core/Accordion';
// import AccordionSummary from '@material-ui/core/AccordionSummary';
// import AccordionDetails from '@material-ui/core/AccordionDetails';
// import Typography from '@material-ui/core/Typography';
// import ExpandMoreIcon from '@material-ui/icons/ExpandMore';
// import Button from '@material-ui/core/Button';

/*
::::一覧
フローチャートと記号
端子記号と順次構造
出力
入力
変数
 変数の表示
計算式
 表示させる
 使える演算（* /%に注意）
分岐
繰り返し
 実行してみる
 forパターン
ファイル読み込み
配列
 配列
 添え字
多分岐
----------------------------
定義済み処理
 定義済み処理とは
 引数とは

*/

const ThisPages = () => {
    return (
        <Section>
            <h1>このページは？</h1>
            このページではFBEでフローチャートを作る際に役立つ、
            フローチャートとプログラミングの知識を提供します。
            これらを学ぶことで基礎的なプログラミングの考え方を習得することもできます。
            また、すべてFBEを使って解説しています。

            <br />　<br />
            FBEの操作方法を知りたい方は
            以下のページから"FBEチュートリアル"を参照してください。
            <LinkButton href="/fbe_tutorial/1" text="FBE チュートリアル" />

            <h1>学習の心構え</h1>
            プログラミングの学習全般に言えることですが、
            プログラミングは奥が深く、
            <b>一度にすべてを理解することは
                並の人間にはできません</b>。
            なので、<b>3割理解出来たら（分からなくても）次のページへ進みましょう。</b>
            一度インプットした後、
            フローチャートの問題を解いたり、プログラムを自分で作ったりしているうちに、
            インプットの段階では理解できていなかったことが理解できてくるでしょう。
            次のページから始まるチュートリアルでも、分からないところはいったん置いておく
            を意識して見てみてください。

            <br /><br />
            それでは、次のページからフローチャートのチュートリアルを見てみましょう！

        </Section >
    );
};

const Junji = () => {
    return (
        <Section>
            <h1>フローチャートとプログラミング</h1>
            まずはフローチャートの例を見てみましょう。
            <ImgLine cap="" src={imgs[13]} />
            (プログラミングにおける)フローチャートでは,
            <b>コンピュータに何をしてほしいのか</b>を
            はじめから順に記号を使ってかいていきます。
            「何をしてほしいのか」ひとつひとつを<b>処理</b>
            といい、フローチャートでは処理を<b>流れ図記号</b>
            を使って表現します。
            流れ図記号の種類については、後のページで1つ1つ紹介していきます。

            <h1>端子記号と順次構造</h1>
            プログラムを書いていくうえで、"プログラムのはじめとおわり"を書いておくと
            ひとめでプログラムだとわかりやすくなります。なので、フローチャートでは
            <b>端子記号</b>を使って表します。
            <ImgLine cap="はじめ・おわり記号" src={imgs[1]} />
            つまり、はじめ記号からおわり記号までの間にプログラムを書いていきます。
            <br /> <br />
            何かプログラムを入れてみましょう。
            <ImgLine cap="" src={imgs[2]} />
            新しく出てきた記号は今は分からなくてもかまいません。
            ここで分かってほしいことは、
            <b>プログラムの初めと終わりにははじめ記号とおわり記号をかく</b>
            ということだけです。

        </Section>
    );
};

const Output = () => {
    return (
        <Section>
            <h1> 出力 </h1>
            今度はコンピュータに、出力をさせてみましょう。
            出力とは、簡単に言えば<b>画面に表示する事</b>です。
            人間で例えれば何かを"くちで言う"事と思えばいいでしょう。
            <br /><br />
            コンピュータに出力してもらうためには、<b>データ記号</b>を使います。
            データ記号は以下のような記号です。
            <ImgLine cap="データ記号" src={symImgs["out"]} />
            例えば「プログラミング」という文字を表示するためには
            データ記号に「"プログラミング"を出力」というように書きます。
            プログラミングという文字をかこっている「"」はダブルコーテーションという記号で、
            それで囲まれたものが文字であることを表しています。
            Excelをやったことがある人にはなじみがあるかもしれませんが、
            よくわからない人は、"表示したいものを「"」で囲むんだー"という理解で今は大丈夫です。
            <br /><br />

            ではこのデータ記号を使って簡単なプログラムを作ってみましょう。
            今回は"プログラミング"という文字を出力するプログラムを作って実行してみました。
            <ImgLine cap="プログラミングと表示するプログラム" src={imgs[3]} />
            "プログラミング"と表示されました。

        </Section>
    );
};

const Input = () => {
    return (
        <Section>
            <h1>入力</h1>
            前回紹介したデータ記号、実はデータの出力だけでなく、
            データの入力もできるんです。
            データの入力とは人間がコンピュータに何かを教えることです。
            コンピュータは教えてもらったことをもとに、出力することが多々あります。
            例えば年齢を入力する例は次の通りです。
            <ImgLine cap="年齢を入力する" src={symImgs["in"]} />
            <br /><br /><br />

            今回は数字を入力してその数字をそのまま出力するプログラムを用意して実行してみます。
            それでは実行してみるとどうなるか試してみましょう！
            <ImgLine cap="数字を入力" src={imgs[4]} />
            入力記号のところでコンピュータが入力を求めてきました。
            上の例では3と答えています。
            <ImgLine cap="出力" src={imgs[5]} />
            3と答え終わると、その後表示がされました。
            ちなみに、上の例のような入力したものをそのまま出力するプログラムを
            <b>おうむがえし</b>するプログラムと言ったりします。
            頭の片隅に置いておいてください。

        </Section>
    );
};

const Variable = () => {
    return (
        <Section>
            <h1>変数</h1>
            人間が何かを覚えておくためには、メモ用紙が必要です。
            人であれば、たとえば「年齢は15と覚えていて！」と言われれば
            「年齢:15」といったふうにメモを取るでしょう。
            仮にメモを取らなくても頭の中でそのように覚えているはずです。
            <br />
            コンピュータにとってのメモ用紙を<b>変数</b>と言います。
            先ほどのように、「年齢は15と覚えていて！」と言われると、
            コンピュータは年齢と書いたメモ用紙に15と書きこみます。
            <ImgLine src={imgVar01} />
            こうすることで、あとで年齢を思い出したいときに、このメモ用紙を見て
            年齢を知ることが出来ます。もしメモ用紙（変数）に15と書いていなければ
            コンピュータは年齢を答えることが出来ません。
            <br /><br />
            ではフローチャートで変数を使うためにはどのように書くのか見てみましょう。
            フローチャートでは<b>計算記号</b>を使います。
            <ImgLine src={symImgs["calc"]} />
            上のように長方形の中で「0→変数」と書きます。<br />
            この例では「変数」というメモ帳（変数）に0という数字を入れています。
            時々プログラミングでは矢印の左右が入れ替わって「変数←0」と表記されることもありますが、
            矢印の出元(?)の値を矢印の先に入れるということは必ず変わりません。
            矢印の左右で覚えないようにしてください。
            <br /><br />

            計算記号をプログラムに使ってみましょう。
            今回は単純に年齢に10と入れるだけのプログラムを作ってみます。
            <ImgLine src={imgs[6]} />
            このプログラムでは入出力は何もないため、何も表示されません。
            なので人間には何が変わったのかは分かりませんが、コンピュータの頭の中では
            次のようにメモが残されています。
            <ImgLine src={imgs[7]} />
            <br /><br />

            では次にこの値を使ってデータを出力してみましょう。
            <ImgLine src={imgs[8]} />

            上のように「年齢を出力」と書くことで、
            年齢にメモされた数字（10）を表示させることが出来ました。
            <br /><br />

            変数に値を入れることを「変数に代入する」ともいうので、
            覚えておきましょう。

            <div className="memo">
                <h1>年齢を「"」で囲まないでいいのか</h1>
                コンピュータは年齢を出力と言われたときに、
                「年齢という文字をそのまま表示する」のか
                「年齢という変数の中身を表示する」のかを
                どうやって判断するのでしょうか。<br />
                答えは
                <b>「"」で囲まれている文字はそのまま出力</b>して、
                <b>「"」で囲われてない文字は変数としてその中身を出力</b>します。
                <br />
                つまり、出力のチュートリアルでプログラミングという文字を
                「"」で囲むようにしていたのは、プログラミングという文字だからであって、
                変数ではないからだったのです。
                <br />
                これを踏まえて、変数を表示させたいのか・文字として表示させたいのかを
                「"」で囲うか否かでしっかり区別するようにしましょう。
            </div>


        </Section>
    );
};

const Calc = () => {
    return (
        <Section>
            <h1>計算</h1>
            前回、変数に0や10といった数字を入れていましたが、
            そこには計算式を入れることもできます。
            <ImgLine cap="1+1の計算結果を答えに入れる" src={imgs[9]} />
            これを実行すれば"答えを出力"のところで1+1の計算結果である2が表示されるはずです。
            <ImgLine cap="" src={imgs[10]} />
            予想通り2が表示されました。
            <br /><br />

            基本的に使用できる計算は以下の5つです。
            <ul>
                <li>足し算</li>
                <li>引き算</li>
                <li>掛け算</li>
                <li>割り算</li>
                <li>余り算</li>
            </ul>
            <ImgLine cap="使用できる5つの計算" src={imgs[11]} />
            ここで注意したいのが、掛け算割り算余り算は普段見る
            "×","÷"ではなく、"*","/"を使うことです。
            また、"( )"（かっこ）を使った計算もできます。
            それぞれの計算結果は以下の通りになります。
            <ImgLine cap="計算結果" src={imgs[12]} />

            <div className="memo">
                <h1>計算について</h1>
                FBEでフローチャートを作成する際には上のように計算式を
                組み立てれば問題ないのですが、実は必ずしも上の通りとは限らない時があります。
                例えば、ある参考書では掛け算割り算は"×","÷"を使うことになっていますし、
                余り算は"5 mod 2"や、"mod(5,2)"のように書かれたりします。
                とはいえ"×","÷"で書かれていたらその通り読めますし、
                あまり算については問題に"あまりは～と表す"とあると思うので、
                その時々で臨機応変に対応していく必要があります。
            </div>


        </Section>
    );
};

const Branch = (props) => {
    return (
        <Section>
            <h1>分岐</h1>
            プログラミングをしていくうえで、
            「こういう条件の時には〇〇をしたいけど、そうじゃない時は××したい」
            ということが良くあります。これを処理の分岐と言い、
            フローチャートでは<b>分岐記号</b>を使って表します。
            <ImgLine cap="分岐記号" src={symImgs["branch"]} />
            条件には
            "&lt;"(より小さい), "&gt;"(より大きい), "&lt;="(以下), "&gt;"(以上),
            "="(と同じ), "!="(と違う) 等が使えます。
            <div className="memo">
                <h1>!= (違う)</h1>
                問題や資料によっては"≠"を使うこともあります。
                FBEでは!=を使います。
            </div>
            実際のプログラムに使ってみるとこのようになります。
            <ImgLine cap="分岐を使ったプログラム" src={imgs[13]} />
            このプログラムでは、
            <ul>
                <li>年齢を入力して</li>
                <li>年齢が20以上なら(条件がYesなら)</li>
                <li>おとなと出力して</li>
                <li>そうでないなら(条件がNoなら)</li>
                <li>こどもと出力する</li>
            </ul>
            という動きをします。
            例えば年齢に15が入っていた場合こどもと表示されます。
            この時おとなとは表示されません。
            <ImgLine cap="" src={imgs[14]} />

        </Section>

    );
};

const Loop = () => {
    return (
        <Section>
            <h1>繰り返し</h1>
            フローチャートで繰り返しを表現するにはループ記号を
            使用します。
            <ImgLine cap="ループ記号" src={symImgs["while"]} />
            "条件"にはどんな時に繰り返したいかを記述します。
            この条件がNoになったときにループから出ます。
            例えば次のフローチャートでは、変数"回数"を1から始めて、
            回数が3以下の間繰り返します。
            <ImgLine cap="" src={imgs[15]} />
            上の例では次のように処理が行われていきます。
            <ul>
                <li>回数に1を入れる</li>
                <li className="blue">{"回数<=3"} はYesなのでループに入る</li>
                <li>{"1回目のループ"}と表示される</li>
                <ImgLine cap="" src={imgs[16]} />
                <li>回数+1を回数に入れる（回数が1増えて2になる）</li>
                <li className="blue">{"回数<=3"} はYesなのでループに入る</li>
                <li>{"2回目のループ"}と表示される</li>
                <ImgLine cap="" src={imgs[17]} />
                <li>回数+1を回数に入れる（回数が1増えて3になる）</li>
                <li className="blue">{"回数<=3"} はYesなのでループに入る</li>
                <li>{"3回目のループ"}と表示される</li>
                <ImgLine cap="" src={imgs[18]} />
                <li>回数+1を回数に入れる（回数が1増えて4になる）</li>
                <li className="blue">{"回数<=3"} はNoなのでループからでる</li>
                <li>おわり</li>
            </ul>
            青色の部分はループに入るか、ループを出るかの判断をしているところです。
            <br />
            このように処理を〇回繰り返したいときは、
            <b>回数カウント用の変数（上の例では回数）を1から始めて、
                回数を1ずつ増やして、
                回数{"<="}〇の間繰り返す</b>
            というように流れ図を書いていきます。
            <br /><br />

            <h2>もうひとつ繰り返し</h2>
            繰り返し記号の書き方はもう一つあります。
            <ImgLine cap="もう一つの繰り返し" src={imgs[19]} />
            この例ではループ記号の中に"回数を1から1ずつ増やして{"回数<=3の間"}"と書きます。
            上の例は先ほどの例と同じように
            <b>回数カウント用の変数（上の例では回数）を1から始めて、
                回数を1ずつ増やして、
                回数{"<="}〇の間繰り返す</b>処理をします。
            処理を〇回繰り返したいという時はこちらの書き方を使った方が、すっきりして見やすいのでいいです。
            ただし、"〇〇の間"という書き方でないと表せない時もあるのでその時は臨機応変に使い分けましょう。

        </Section>
    );
};

const FileRead = ()=>{
    return (
        <Section>
            <h1>ファイル読み込み</h1>
            何か勉強や仕事をするときに分からないことがあった時、
            人間であれば次のどちらかで対処すると思います。
            <ul>
                <li>分かる人に聞く</li>
                <li>本などを見て調べる</li>
            </ul>
            コンピュータも同じように人に聞いたり、
            本を見て調べようとします。
            人に聞くときは、前回までに学んだデータ記号を使って人に聞きます。
            <ImgLine cap="データ記号で入力" src={symImgs["in"]} />
            本を見て調べるにはどのようにするのでしょうか。
            <br /><br />
            そもそもコンピュータにとっての本は<b>ファイル</b>と呼ばれています。
            ファイルには欲しいデータが下のように<b>1行ずつ</b>書いてあります。
            <br/><br/>
            例）点数の一覧が知りたいとき
            <ImgLine cap="" src={imgFI} />
            コンピュータは点数を1行ずつ読み込むことで、「一人目は60点、二人目は55点、...」とデータを知ることが出来ます。
            <br /><br />
            フローチャートではどのように書くか見ていきましょう。
            <ImgLine cap="" src={imgs[31]} />
            ファイルから1行読み込むには、データ記号を使います。
            この場合ファイルの名前は"得点ファイル.csv"でそこから1行読み込むため、
            「得点ファイル.csvからデータを読む」と書きます。<br />
            ではこれを実行してみましょう。とはいっても出力がないため何も表示されません。
            ですが読み取ったデータはコンピュータの頭の中に<b>変数として保存</b>されています。
            <ImgLine cap="ファイルを読み取ると..." src={imgs[32]} />
            今回の場合、読み取ったデータは点数という変数に保存されています。
            つまり、得点を使って表示したり計算したりすることが出来ます。
            <ImgLine cap="読み取った点数をおうむがえし" src={imgs[33]} />
            <div className="memo">
                <h1>保存される変数</h1>
                ファイルを読み取った時に、読み取ったデータが保存される変数は
                随時変わります。<br/>
                FBEではファイルごとに読み取った時どの変数に保存するかを編集できます。<br/>
                フローチャートを使ったアルゴリズムの問題では例えば以下の様に問題にあった場合、
                日付という変数に読み取った日付が、売上という変数に読み取った売上が保存されると思えばいいでしょう。
                
                <ImgLine cap="" src={imgFI2} />
            </div>
            <h2>ファイル読み込みを繰り返す</h2>
            1回ファイルから読み取ると取得できるデータは
            <b>ファイル1行分</b>のみです。
            先ほどまでの例ではファイルの始めの1行目しか読み取れていませんでした。
            他の行も読み取るためにはファイル読み取りのデータ記号を複数書かなければいけません。
            <ImgLine cap="" src={imgs[34]} />
            ですが、ファイルの行数だけこれを書くのは面倒ですし、
            ファイルの行数も分からない時があるかもしれません。
            そんな時に繰り返しを活用するととても便利です。
            具体的には次のようにループ記号を使うことが出来ます。
            <ImgLine cap="" src={imgs[35]} />
            単にループでデータ記号を囲むだけですが、
            ループの条件に注目してください。
            「<b>データがある間</b>」となっています。
            この書き方をすると、データがある間はループに入って、
            データがない場合はループから抜けるようになります。
            これで何個もデータ記号を書かずに済みます。便利ですね。
        </Section>
    );
};

const Array = ()=>{
    return (
        <Section>
            <h1>配列</h1>
            配列とは変数が1つに合体したものです。
            今まで（1つの）変数には1つしかものを入れることはできませんでした。
            <ImgLine cap="変数" src={imgs[7]} />
            ですが（1つの）配列には<b>複数のもの</b>を入れることが出来ます。
            <ImgLine cap="配列" src={imgs[21]} />
            よく、<b>変数は一軒家、配列はマンション</b>と例えられます。
            <table><tbody>
                <tr> <td>一軒家</td><td>1家族しか住めない</td> <td>{"→"}</td> 
                    <td>変数</td><td>1つしか入らない</td>
                    </tr>
                <tr> <td>マンション</td><td>たくさんの家族が住める</td> <td>{"→"}</td> 
                    <td>配列</td><td>たくさん入る</td>
                    </tr>
            </tbody></table>

            とりあえずピンと来なくても、この後の説明を読んでみてください。
            次の順で説明をしていきます。さらっと流し読みしてください。
            <ul>
                <li>配列の作り方</li>
                <li>配列の要素を取得</li>
                <li>配列の要素を書き換える</li>
                <li>変数と配列の比較</li>
            </ul>

            <h2>配列の作り方</h2>
            配列を作るためには<b>準備記号</b>を使います。
            「1次元配列〇〇を準備」もしくは「配列〇〇を準備」と
            書きます。"1次元配列"というワードは今は無視してください。
            <ImgLine cap="準備記号" src={imgs[36]} />
            これで配列ARRを作ることが出来ました。
            <div className="memo">
                <h1>配列の初期値</h1>
                作られた配列の中にどのような値が入っているかは、
                検定などの問題においては必ず問題文中で書かれています。
                が、大抵すべての中身が数字の0になっていることが多いです。
            </div>

            <h2>配列の要素を取得</h2>
            先ほど作った配列の中身を見たいときは少し癖があります。
            先ほど言った通り配列には複数の値を入れることが出来ますが、
            一つの配列の中にたくさん値が入っていると
            取り出したいときにどれを取り出せばいいの？となってしまいます。
            <ImgLine cap="" src={imgArr02} />
            そこで配列は<b>部屋番号</b>を指定して、
            配列の中のどれがほしいのかを指定します。
            （配列の部屋番号の事を<b>添え字</b>(そえじ)といいます。）
            この部屋番号（添え字）が厄介で、部屋番号（添え字）は<b>0から始まります</b>（1からではありません）。
            後ろに行けば行くほど1ずつ増えていきます。
            図にすると次のようになります。
            <ImgLine cap="" src={imgArr03} />
            例えば、配列「点数」の部屋番号(添え字)0番の値は「 点数[0] 」とすると取得できます。
            取得出来たらそれを使って表示や計算などに使えます。
            <br/>
            <ImgLine cap="配列ARRの添え字0番を表示する" src={imgs[37]} />

            <h2>配列の要素を書き換える</h2>
            配列の中身を書き換えるには変数と同じように計算記号を使って
            「〇〇[添え字] ← 入れたいもの」とすることで書き換えることが出来ます。
            <ImgLine cap="配列ARRの添え字0を999に書き換える" src={imgs[38]} />
            
            <h2>変数と配列の比較</h2>
            ここまでで配列の使い方を見てきました。
            では配列を使うとどんないいことがあるでしょうか。<br/>
            例えばこんなパターンを考えてみてください。<br/>
            例） 10個の数字を入力する<br />
            もし配列を使わない場合、
            <ul>
                〇配列を使わない
                <li>Aを入力する</li>
                <li>Bを入力する</li>
                ...
                <li>Jを入力する</li>
            </ul>
            ととても長くなってしまします。ですが配列を使うと、
            <ul>
                〇配列を使う
                <li>配列NUMを用意する</li>
                <li>{"iを0から1ずつ増やしi < 10の間繰り返す"}</li>
                <li>NUM[i]を入力する</li>
            </ul>
            使わないパターンでは10行いるのに対し、
            たったの3行で書けるようになりました。
            また入力する数が10から100になったとしても
            配列では{" i < 10 を i < 100 "}にするだけで済みます。
            これを見れば配列がとても魅力的に見えてきませんか？
            <br/><br/>
            以上で配列の説明は終わりですが、配列は初心者にとっては分かりにくいもの。
            始めの内は雰囲気だけでもつかめれば大丈夫です。様々なプログラムを見て、作って、
            慣れていってください。
            
        </Section>
    );
};

const MultiBranch = ()=>{
    return (
        <Section>
            <h1>多分岐</h1>
            分岐にはYesのときNoのときの二つに分岐するものだけではなく、
            〇〇がAのときは～する、Bのときは～する、Cの時は～するという風に
            たくさん分岐することがあります。これをそのまま多分岐といいます。
            多分岐も分岐記号を使って表します。
            <ImgLine cap="多分岐" src={imgs[39]} />
            上の例では変数が1なら～、2なら～、3なら～、それ以外なら～というように分岐しています。

            <NewLine brCnt={2}/>
            ただし多分岐やYesNoでの分岐を何度もするとフローチャートが横に長くなり、
            非常に見にくくなるので使用するのは最小限で抑えるようにしましょう。

        </Section>
    );
};

const MultiArray = ()=>{
    return (
        <Section>
            <h1>多次元配列</h1>
            前々回に紹介した配列は、配列の中でも
            1次元配列と呼ばれるものです。
            1次元配列があるということは<b>2次元配列</b>や3次元配列もあるということなのですが、
            それらはどのようなものなのでしょうか。
            <NewLine />
            
            2次元配列は次のように表のような形になっています。
            <ImgLine cap="2次元配列" src={imgs[41]} />
            1次元は直線状、2次元は平面、3次元は立体になっています。
            次はその使い方を見ていきましょう。

            <h2>2次元配列の作り方</h2>
            2次元配列の作り方は1次元配列とほぼ同じです。
            3次元配列もほぼ同じです。
            <ImgLine cap="2次元配列" src={imgs[40]} />
            これを実行することで次のように2次元配列を作ることが出来ます。
            <ImgLine cap="2次元配列" src={imgs[41]} />
            <div className="memo">
                <h1>配列の初期値</h1>
                2次元配列の初期値も1次元配列の時と同じように
                問題文中に書いてあることがほとんどです。
            </div>
            
            <h2>2次元配列を取得</h2>
            2次元配列からデータを取得するには、
            1次元配列と同じように配列内のどの値が欲しいのか
            を表す<b>添え字</b>を指定しなければいけません。
            ですが、2次元配列は2方向あるため、
            1次元配列のように「〇番目の値」という風には指定できません。
            「〇行目〇列目の値」というふうに指定しなければいけません。
            例えば「2次元配列ARRの2行目3列目の値」が欲しい場合は
            「ARR[1][2]」というふうに指定します。
            <ImgLine cap="ARR[1][2]で取得" src={imgs[43]} />
            例えば先ほどの例に出てきたARRの内容が次のようだった時、
            <ImgLine cap="" src={imgs[41]} />
            「ARR[1][2]」は「ARRの1行目2列目」を表すため、「7」をさしています
            (行と列、どちらも0から始まることに注意)。
            <div className="memo">
                <h1>2次元配列の添え字</h1>
                「ARR[1][2]」は「ARRの1行目2列目」を表す<br/>
                と言いましたが、稀に
                「ARR[1][2]」は「ARRの2行目1列目」を表す<br/>
                ことがあります。
                問題や状況によってまちまちですので、
                2次元配列を扱うときは注意した方がいいかもしれません。
            </div>

            <h2>2次元配列を書き換える</h2>
            書き換えも1次元配列とほぼ変わらず、
            「ARRの1行目2列目を999にしたい」時は
            「999 → ARR[1][2]」
            と書きます。

        </Section>
    );
};



//-------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------
//-------------------------------------------------------------------------------------------------------------


const pageList = [
    {
        "pageId": "1",
        "title":"このページは？",
        "jsx":
            <ThisPages />
    },
    {
        "pageId": "2",
        "title":"フローチャートとプログラミング",
        "jsx":
            <Junji />
    },
    {
        "pageId": "3",
        "title":"出力",
        "jsx":
            <Output />
    },
    {
        "pageId": "4",
        "title":"入力",
        "jsx":
            <Input />
    },
    {
        "pageId": "5",
        "title":"変数",
        "jsx":
            <Variable />
    },
    {
        "pageId": "6",
        "title":"計算",
        "jsx":
            <Calc />
    },
    {
        "pageId": "7",
        "title":"分岐",
        "jsx":
            <Branch />
    },
    {
        "pageId": "8",
        "title":"繰り返し",
        "jsx":
            <Loop />
    },
    {
        "pageId": "9",
        "title":"ファイル読み込み",
        "jsx":
            <FileRead />
    },
    {
        "pageId": "10",
        "title":"配列",
        "jsx":
            <Array />
    },
    {
        "pageId": "11",
        "title":"多分岐",
        "jsx":
            <MultiBranch />
    },
    {
        "pageId": "12",
        "title":"多次元配列",
        "jsx":
            <MultiArray />
    },

];
export const pages = pageList;

const TutorialPage01 = (props) => {
    return (
        <TutorialTemplate className="tp01" match={props.match} title={<>フローチャート<br />チュートリアル</>} pageList={pageList} url="/flowchart_tutorial/"/>
    ) ;
};

/*
const TutorialPage01 = (props) => {

    const [listShow,setListShow] = useState(false);
    const handleClickList = (eve)=>{
        setListShow(prev => !prev);
    };
    console.log(pageList);
    const lists = pageList.map((ele)=>{
        return <li key={ele.tid}><a href={"/flowchart_tutorial/"+ele.tid}>{ele.title}</a></li>;
    });
    const [pages, setPages] = useState(pageList);

    let pageIdx = -1;
    pages.forEach((ele, idx) => {
        if (ele["tid"] === props.match.params.tid) {
            pageIdx = idx;
        }
    });
    let [nowPageIdx, setNowPageIdx] = useState(pageIdx);
    if (nowPageIdx < 0) {
        //ページが存在しない時
        pages[nowPageIdx] = {
            "jsx":
                <Section type="center">
                    <h1>ERROR !</h1>
                    <h1>Not Found In Tutorials !</h1>
                    このページは存在しません。URLを確かめてください。
                    <LinkButton href="/flowchart_tutorial/1" text="チュートリアルの始めへ" />
                    <LinkButton href="/" text="TOPへ" />
                </Section>
        };
    }


    // const useStyles = makeStyles((theme) => ({
    //     root: {
    //       width: '100%',
    //     },
    //     heading: {
    //       fontSize: theme.typography.pxToRem(15),
    //       fontWeight: theme.typography.fontWeightRegular,
    //     },
    //   }));
    // const classes = useStyles();

    return (
        <>
            <ul className={"tutorial-menu "}>
                <h1 onClick={handleClickList}>一覧</h1>
                {listShow ? lists : "" }
                <div onClick={handleClickList}>{listShow ? "＞閉じる" : "＜開く"}</div>
            </ul>

            <main className="tp01 tutorials">
                <Section type="center" id="tutorial_top">
                    <h1 className="ta-center">フローチャート<br />チュートリアル</h1>
                </Section>

                <Section type="center" className="top-move-bt-sec">
                    <div className="tp-move-bt-bar">
                        {0 < nowPageIdx ? <LinkButton href={`/flowchart_tutorial/${pages[nowPageIdx - 1]["tid"]}`} text="前のページへ"></LinkButton> : <div></div>}
                        {nowPageIdx < pages.length - 1 ? <LinkButton href={`/flowchart_tutorial/${pages[nowPageIdx + 1]["tid"]}`} text="次のページへ"></LinkButton> : <div></div>}
                    </div>
                </Section>

                {pages[nowPageIdx]["jsx"]}

                <Section type="center" className="top-move-bt-sec">
                    <div className="tp-move-bt-bar">
                        {0 < nowPageIdx ? <LinkButton href={`/flowchart_tutorial/${pages[nowPageIdx - 1]["tid"]}`} text="前のページへ"></LinkButton> : <div></div>}
                        {nowPageIdx < pages.length - 1 ? <LinkButton href={`/flowchart_tutorial/${pages[nowPageIdx + 1]["tid"]}`} text="次のページへ"></LinkButton> : <div></div>}
                    </div>
                </Section>


            </main>

        </>

    );
};
*/
export default TutorialPage01;

